continue
puts @list
@list
continue
tasks
continue
tasks
continue
tasks
continue
next
tasks
next
tasks
exit
tasks
tasks.first.sub(/^\d+.\s/,"")
tasks.first.sub(^\d+.\s,"")
tasks.first.sub{^\d+.\s,"")
tasks.first
tasks
tasks.sub{^\d+.\s,"")
tasks
tasks.join
tasks
exit
puts @list
@list
exit
exi
puts @list
@list
add_checkbox(@list[list_index-1].task)
add_checkbox(@list[list_index-1])
@list[list_index-1]
exit
continue
next
@list[list_index-1].task
@list[list_index-1]
task
(/^\[ \]/ =~ task).nil?
(/^\[X\]/ =~ task).nil?
exit
0 || nil
y.sub(/^\[ \]/,"[X]") =~ /^\[X\]/
y.sub(/^\[ \]/,"[X]") =~ /^\[ \]/
y.sub(/^\[ \]/,"[X]")
@list
@list[list_index-1].task.sub(/^\[ \]/,"[X]")
@list
y.sub(/^\[ \]/,"[X]")
y =  @list[list_index-1].task
exit
y
y = @list[list_index-1].task.sub(/^\[ \]/,"[X]")
@list[list_index-1].task = y
y = @list[list_index-1].task.sub(/^\[ \]/,"[X]")
@list[list_index-1].task
continue
exit
puts @list
@list
continue
next
exit
 @list[list_index-1].task.sub(/^\[ \]/,"[X]")
@list[list_index-1].task
@list
exit
@list[list_index-1].task.sub(/^\[ \]/,"xxxx")
@list[list_index-1].task
@list[list_index-1]
@list
@list.lists
@list.list
@list.tasks
@list.lists
@list
tasks.task.sub(/^\[ \]/,"xxxx")
/^\[ \]/.match(tasks.task)
tasks.task
tasks
tasks = @list[list_index - 1]
list_index-1
list_index
@list
exit
continue
exit
list_item.task
puts #{list_item_i + 1}. " + "hello"
puts (#{list_item_i + 1}. ") + "hello"
puts ((#{list_item_i + 1}. ") + "hello") 
list_item_i
list_item
list_array
exit
continue
task
next
task
next
task
exit
 /^\[ \]/ =~ tasks || /^\[X\]/ =~ tasks
tasks
task
testing
 /^\[ \]/ =~ testing || /^\[X\]/ =~ testing
task
/^\[ \]/ =~ task || /^\[X\]/ =~ task
0 || nil
0 == nil
/^\[ \]/ =~ task
task
/^\[X\]/ =~ task
task = "[ ]" + task
task
/^\[X\]/) =~ task.nil?
next
continue
task
next
task
next
task
exit
next
continue
exit
continue
tasks
task
list_array
@lists
@list
list
next
continue
next
continue
exit
xit
((/^\[X\]/) =~ "Move with Lil to the black mountain hills of Dakota").nil?
("Move with Lil to the black mountain hills of Dakota").nil?
(/^\[X\]/) =~ "Move with Lil to the black mountain hills of Dakota"
((/^\[X\]/) =~ task.first)
((/^\[X\]/) =~ task.first).nil?
hello.nil?
tasks.first
tasks
task
nil == nil
nil == 0
(/^\[X\]/) =~ "[0]hello"
(/^\[X\]/) =~ "[X]hello"
(/^\[X\]/) =~ "[X]"
"[X]hello" ~= (/^\[X\]/)
String.methods.sort
string.methods?.sort
string.methods?sort
string.methods.sort
string.method.sort
"[X]hello".match?(/^\[X\]/)
"[X]hello".contains?(/^\[X\]/)
"[X]hello".includes?(/^\[X\]/)
"[X]hello".has?(/^\[X\]/)
nil == nil
false == true
nil == true
nil == false
"[X]hello".include?(/^\[X\]/)
"[X]hello".include? /^\[X\]/
tasks.first
if (/^\[X\]/.match("[X]hello") || nil)
/^\[X\]/.match("[X]hello") || nil
nil || nil
/^\[X\]/.match("[X]hello")
/^\[ \]/.match("[X]hello")
/^\[ \]/.match("[ ]hello")
/^\[ \]/.match(tasks.first)
/^\[X\]/.match(tasks.first)
(^\[X\]).match(tasks.first)
tasks.first
tasks.list
tasks[0]
tasks.tasks
tasks.task
tasks.length
tasks
tasks[0]
tasks
continue
next
exit
@list.list[get_task].task
@list.list[get_task]
@list[get_task]
@list
get_task
@get_task
next
@list
next
exit
next
continue
next
args
option
exit
continue
exit
@list
@list.task
@list.list
output_file.close
output_file.puts(@list.list)
 output_file = File.new("test_file.csv","w+")
@list.complete(1)
@list
@lists
output_file.close
output_file.puts(@list.list)
 output_file = File.new("test_file.csv","w+")
@list.delete(1)
@list.delete(0)
@list.delete(10)
@list
output_file.close
output_file.puts(@list.list)
output_file = File.new("test_file.csv","w+")
output_file
output_file.puts(@list.list)
write(@list.list)
output_file.write(@list.list)
output_file = File.new("test_file.csv","w+")
output_file.write(@list.list)
output_file.puts(@list.list)
output_file = File.new("test_file.csv","w+")
output_file.puts(@list.list)
puts @list.list
@list.list.tasks.task
output_file.puts(@list.list.tasks)
output_file = File.new("test_file.csv","w+")
File.open("test_file.csv", "w+") do |f| (@list.list.each {|tasks| f.write(tasks.task)}) end
File.open("test_file.csv", "w+") do |f| (@list.list.each {|tasks| f.write(tasks.task newline)}) end
File.open("test_file.csv", "w+") do |f| (@list.list.each {|tasks| f.write(tasks.task)}) end
File.open("test_file.csv", "w+") do |f| (@list.list.each {|tasks| f.write(tasks.task + "/n")}) end
File.open("test_file.csv", "w+") do |f| (@list.list.each {|tasks| f.write(tasks.task + /n)}) end
File.open("test_file.csv", "w+") do |f| (@list.list.each {|tasks| f.write(tasks.task)}) end
File.open("test_file.csv", "w+") do |f| f.write(puts @list.list) end
@list.list.class
@list.list
@lists.list
